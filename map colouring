def is_safe(graph, colors, node, color):
    for neighbor in graph[node]:
        if neighbor in colors and colors[neighbor] == color:
            return False
    return True

def graph_coloring(graph, colors, node, max_colors):
    if node == len(graph):
        return True

    for color in range(1, max_colors + 1):
        if is_safe(graph, colors, node, color):
            colors[node] = color
            if graph_coloring(graph, colors, node + 1, max_colors):
                return True
            colors[node] = 0

    return False

def map_coloring(graph, max_colors):
    colors = [0] * len(graph)
    if graph_coloring(graph, colors, 0, max_colors):
        return colors
    else:
        return None

# Example usage:
graph = {
    0: [1, 2, 3],
    1: [0, 2],
    2: [0, 1, 3],
    3: [0, 2]
}
max_colors = 3

solution = map_coloring(graph, max_colors)
if solution:
    print("Solution found with colors:", solution)
else:
    print("No solution found with the given number of colors.")
